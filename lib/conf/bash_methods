# Command behaviors set here...

function _install_jspack() {
    npm i $CONTENT_LIB/jspack
}

function vscode_settings() {
    local target=$1
    if [[ "$target" == '' ]]; then
        target=.
    fi
    if [[ ! -d "$target"  ]]; then
        echo Expected an existing directory path, found: $target >&2
        return 127
    fi
    if [[ ! -e "$MAIN_VSCODE_SETTINGS_SYMLINK" ]]; then
        echo Main .vscode symlink/link was not found: $MAIN_VSCODE_SETTINGS_SYMLINK >&2
        return 1
    fi
    if [[ ! -L "$MAIN_VSCODE_SETTINGS_SYMLINK" ]]; then
        echo Main .vscode \($MAIN_VSCODE_SETTINGS_SYMLINK\) is not a symlink?
        read -p 'Continue Linking? [y/n] ' cont
        if [[ 'y' != "$cont" ]]; then
            return 127
        fi
    fi
    if [[ -e "$target/.vscode" ]]; then
        echo There exists a .vscode settings in the $target folder. >&2
        return 1
    else
        local vscode_path=$(realpath "$MAIN_VSCODE_SETTINGS_SYMLINK"  --strip --relative-to "$target")
        ln -s "$vscode_path" "$target/.vscode"
    fi
}

function _set_host_port() {
    export $1_HOST=$2
    export $1_PORT=$3
}

function _get_origins() {
    echo "MOVIE_ORIGIN   = $MOVIE_HOST:$MOVIE_PORT"
    echo "STATICS_ORIGIN = $STATICS_HOST:$STATICS_PORT"
}

function _set_movie() {
    _set_host_port MOVIE $1 $2
}

function _set_statics() {
    _set_host_port STATICS $1 $2
}

function _set_origins_host() {
    _set_movie $1 $MOVIE_PORT
    _set_statics $1 $STATICS_PORT
}

function _set_origins_router_host() {
    _set_origins_host "192.168.0.100"
}

function _set_origins_local_host() {
    _set_origins_host "localhost"
}

. /etc/bash.bashrc
. /etc/bash_completion

function shlvl_() {
    echo "Shell LEVEL: $SHLVL"
}

function _get_virtual_env() {
	if [[ -d "$VIRTUAL_ENV" ]]; then
		echo -n "$(basename "$VIRTUAL_ENV") "
	else
		echo -n ""
	fi
}

function _get_state_char() {
	# symbols="✓×"
  if [[ $_LAST_COMMAND_STATE -eq 0 ]]; then
		echo -n ' ✓'
	else
		echo -n ' ×'
	fi
}

function _get_state_color() {
	local OK_COLOR='\e[92;3m'
	local ERR_COLOR='\e[91;3m'
	# symbols="✓×"
  if [[ $_LAST_COMMAND_STATE -eq 0 ]]; then
		echo -en "$OK_COLOR"
	else
		echo -en "$ERR_COLOR"
	fi
}

function _set_last_command_state() {
	_LAST_COMMAND_STATE=$?
  return $_LAST_COMMAND_STATE
}

_LAST_COMMAND_STATE=0
PROMPT_COMMAND=_set_last_command_state
PS1=$'\[\e[0m\]\[$(_get_state_color)\]$(_get_state_char) \[\e[0m\]\[\e[97;1m\]$(_get_virtual_env)\[\e[96;1m\]\W\[\e[97;1m\] • \[\e[0m\]'

# import my functions if they exist
if [[ -f ~/.bash_utils ]]; then
    . ~/.bash_utils
#else
#	echo "Bash Utils Not Found."
fi

# other conditionals
# add my path to PATH

function _add_dir_to_path() {
    for dir; do
        if [[ -d "$dir" ]]; then
            export PATH="$dir":$PATH
        else
            echo "Your BIN: '$BIN' was not found." >&2
        fi
    done
}

# Jobs Operation
# Get the Process IDs (PIDs) of runnig jobs
function pjobs() {
  value=$(jobs -l | awk '{print \$2}')
  if [[ -z "$value" ]]; then
    return 2;
  fi
  echo "$value"
}

# Get the number oof running jobs
function njobs() {
  value=$(jobs -l | wc -l)
  if [[ "$value" -eq "0" ]]; then
    echo "$value" >&2
    return 1
  fi
  echo "$value"
}

# activate my virtualenv

function _activate_virtual_env() {
    if [[ -f $PYTHON_ENV/bin/activate ]]; then
        . $PYTHON_ENV/bin/activate
    else
        echo "Failed to activate virtual environment py-env: $PYTHON_ENV" >&2
    fi
}

_activate_virtual_env
_add_dir_to_path "$CORE_BIN" "$EXE_BIN"
